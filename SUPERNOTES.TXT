What is Docker?
=======================
	Container mgmt tool
			--- Improve Efficiency
			--- Reduces a Cost
			--- Save time.

Why Docker?


What is Container?
=============================
TECH - 
		USER SPACE with 
				OWN	
					NET
					PMAP
					MNT

Container is a Process FOR host machine
Each container get USER NS for ISOLATION.
Each container get NET NS for SCA | AVA | SEC
Each container get PMAP NS for Process ISOL
Each container get MNT NS for MOUNT ISOL

 29  history
   30  clear
   31  which docker
   32  ps -eaf | grep docker
   33  ps -eaf
   34  ps -eaf | grep docker
   35  ps -eaf
   36  clear
   37  ps -eaf | grep docker
   38  docker run -itd ubuntu
   39  clear
   40  docker ps
   41  ps -eaf | grep docker
   42  docker run -itd ubuntu
   43  docker ps
   44  ps -eaf | grep docker
   45  clear
   46  docker ps
   47  docker attach 0ca0a1611255
   48  docker ps
   49  docker attach 02f949b80f38
   50  clear
   51  ls
   52  clear
   53  ls
   54  docker ps
   55  docker inspect 0ca0a1611255 | grep -i ip
   56  docker inspect 02f949b80f38 | grep -i ip
   57  ifconfig
   58  clear
   59  ps -eaf
   60  clear
   61  docker ps
   62  docker exec 0ca0a1611255 df -kh
   63  docker exec 0ca0a1611255 ps -eaf
   64  docker exec 02f949b80f38 ps -eaf
   65  clear
   66  docker run -d jenkins
   67  clear
   68  docker run -d jenkins
   69  docker ps -a
   70  docker exec 59cbd87add00 ps -eaf
   71  docker exec 2ddc31386c26 ps -eaf
   72  clear
   73  docker ps
   74  docker exec 0ca0a1611255 df -kh
   75  docker exec 02f949b80f38 df -kh
   76  docker exec 02f949b80f38 ls /
   77  docker exec 0ca0a1611255 ls /
   78  docker exec 0ca0a1611255 touch /opt/rajesh.txt
   79  docker exec 0ca0a1611255 ls /opt/rajesh.txt
   80  docker exec 02f949b80f38 ls /opt/
   81  history


Business 
Lightweight App run time env which is isolvated powered by NS with a help of docker.		


CPU and RAM Mgmt - 	

What are the NS which emp - RUN TiME APP --
				USER
				NET
				PMAP
				MNT
CPU and RAM Mgmt - 	
			CGROUP
Capabalites

=========================================================
Other tool ->
	https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-

projects/

Artiectutre of Docker?
==============================
HUMEN -> DOCKER CLIENT ---(REST API)----> DOCKER DEAMON-----CONTAINERD--> KERNAL (NS)

Component of Docker?
==============================
Docker Engine
	 DOCKER CLIENT ---(REST API)----> DOCKER DEAMON
Docker Registry 
		--> Repositorie(S)
		- Repository 1 - ONE IMAGE
		- Repository 2 - ONE IMAGE
		- Repository 3 - ONE IMAGE

	PUB
		hub.docker.com
		GR
		ECR
	PVT	
		Nexus
		Artifactory
		registry
	
Docker Image
	Complete package of APP RUN TIME env*****
	From one image --- yOu can get multiple container
	Each Container share the same image.
Docker Container
	

=============
Demo time
RHEL-7.5_HVM_GA-20180322-x86_64-1-Hourly2-GP2 (ami-5b673c34)
13.234.240.167
ec2-user
Key - rajesh-mumbai.ppk

STATEMENT
====================
DOCKER NEEDS ROOT OR ANY USER WHO IS PART OF GROUP CALLED "DOCKER"
===============
How to install Docker?
https://www.devopsschool.com/tutorial/docker/install-config/
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

 22  sudo yum install -y docker-ce
   23  docker -v
   24  sudo systemctl enable docker
   25  sudo systemctl start docker
   26  docker info
   27  clear
   28  ls
   29  history

=========================================
Container WORKFLOW with Docker.
=====================================================
Create -> Start -> Stop -> Restart -> PAUSE -> UNPAUSE -> KILL -> Start -> stop -> 

remove

What APP YOu want to run?
--------------
Tomcat
Jenkins
mysql
apache
redis
maven
gradle
nginx
java
es
zoo
kibana
============IMAGE ==> Registry -> Repo
====================================
WORKFLOW OF DOCKER ?

1. CHECK IMAGE in LR 
		IF FOUND - APPLIED CONTAINER WORKFLOW
		IF NOT FOUND - CHECK HUB and DOWNLOAD FROM HUB to LR.


Container WORKFLOW with Docker.
=====================================================
Create -> Start -> Stop -> Restart -> PAUSE -> UNPAUSE ->KILL->Start ->stop-> remove

RUN ==
PULL + CREATE + START + BECOME


PAUSE VS UNPAUSE
https://www.devopsschool.com/blog/docker-pause-and-unpause-explanined/

 82  clear
   83  docker images
   84  docker pull jenkins
   85  clear
   86  ls
   87  clear
   88  cd
   89  ls
   90  docker images
   91  dcoker ps
   92  docker ps
   93  docker ps -a
   94  clear
   95  ls
   96  docker stop $(docker ps -a -q)
   97  docker rm $(docker ps -a -q)
   98  clear
   99  docker ps
  100  docker ps -a
  101  docker create jenkins
  102  docker ps
  103  docker ps -a
  104  docker start 504286a7dfd6
  105  docker ps -a
  106  docker stop 504286a7dfd6
  107  docker ps -a
  108  clear
  109  docker restart 504286a7dfd6
  110  docker ps -a
  111  docker pause 504286a7dfd6
  112  docker ps -a
  113  docker unpause 504286a7dfd6
  114  docker ps -a
  115  docker kill 504286a7dfd6
  116  docker ps -a
  117  docker start 504286a7dfd6
  118  docker ps -a
  119  clear
  120  docker stop 504286a7dfd6
  121  docker ps -a
  122  docker rm 504286a7dfd6
  123  docker ps -a
  124  history

http://bit.ly/374O0E9


ymohdriz
shriramv
kgayathri-dev
bharanis86
azarfaiz
subbarayulun
aathiraj10
rajshoponline
kgsag
sadhiq83
lavanya172
pradeepa2194
ShubhSingh


clepg
softsenthil



1 13.232.93.173
2 13.233.23.221
3 35.154.233.157
4 13.235.50.98
5 13.232.123.218
6 52.66.49.150
7 15.206.117.61
8 13.234.122.116
9 13.233.229.245
10 13.235.9.142
11 52.66.51.124
12 13.233.86.165
13 13.233.48.31
14 13.235.134.250
15 13.232.146.65

User name - ec2-user
Key - 
    PPK for Putty - rajesh-mumbai.ppk
    PEM for LINUX - rajesh-mumbai.pem

https://www.devopsschool.com/notes/docker/2019/
=================================================================
PID 1 is running so Your container is running.

docker run ubuntu
docker run jenkins
-----------------------
pull+create+start+become = RUN

How to use that containers?
=============================
How to get inside???

    exec way
            - it execute an executables but inside a container but  
            - with -it && shell - you can do inside a container.

    attach way
            - It attached to PID 1
            - TO DETAHC - you can use -d


  132  docker ps -a
  133  docker run ubuntu
  134  docker ps -a
  135  docker run jenkins
1  docker ps -a
    2  clear
    3  docker run ubuntu ls
    4  docker ps -a
    5  clear
    6  clear
    7  docker ps
    8  docker exec c63057ac066a ls
    9  docker exec c63057ac066a df
   10  docker exec c63057ac066a ps\
   11  docker exec c63057ac066a ps
   12  docker ps
   13  clear
   14  docker ps
   15  docker exec -it c63057ac066a /bin/bash
   16  clear
   17  docker ps
   18  clear
   19  docker ps
   20  docker attach c63057ac066a
   21  docker ps -a
   22  clear
   23  docker stop $(docker ps -a -q)
   24  docker rm $(docker ps -a -q)
   25  clear
   26  ls
   27  docker ps -a
   28  docker run ubuntu
   29  dockr ps
   30  docker ps -a
   31  docker run ubuntu ff
   32  docker ps -a
   33  clear
   34  docker run ubuntu ls
   35  docker ps -a
   36  clear
   37  docker run -it ubuntu /bin/bash
   38  docker ps
   39  docker run -itd ubuntu
   40  docker ps
   41  docker attach 9c4c85ed68f4
   42  docker ps
   43  history


How to access from outside?
53  docker stop $(docker ps -a -q)
   54  docker rm $(docker ps -a -q)
   55  clear
   56  docker help run
   57  clear
   58  docker run -d -p 8080:8080 jenkins
   59  docker ps
   60  docker run -d -p 8080:8080 jenkins
   61  docker ps -a
   62  docker run -d -p 8090:8080 jenkins
   63  clear
   64  docker ps

=========================================================================
LETS CONCLUDE TODAY
=================================================
https://www.devopsschool.com/tutorial/docker/commands/


cp
----------
84  docker cp devopsschool.txt 5e9f72c88b54:/opt
   85  docker run -d jenkins
   86  docker ps
   87  docker cp devopsschool.txt 404e3c50d161:/opt
   88  docker exec 404e3c50d161 touch /opt/fff
   89  docker exec 404e3c50d161 touch /tmp/fff
   90  clear
   91  docker ps
   92  docker exec -it 404e3c50d161 /bin/bash
   93  clear
   94  docker ls
   95  docker ps
   96  ks
   97  ls
   98  docker exec 5e9f72c88b54 ls /opt/
   99  rm -rf devopsschool.txt
  100  ls
  101  docker cp 5e9f72c88b54:/opt/devopsschool.txt .
  102  ls


diff
---------
103  history
  104  clear
  105  ls
  106  docker ps
  107  docker attach 5e9f72c88b54
  108  clear
  109  clear
  110  docker ps
  111  docker diff 5e9f72c88b54
  112  history

port

 117  docker ps
  118  docker port 404e3c50d161
  119  docker port 5e9f72c88b54
  120  docker run -d -p 8080:8080 jenkins
  121  docker ps
  122  docker port c8c549ac53cf
  123  history
[root@ip-172-31-29-54 ec2-user]#


rename

126  docker run -itd --name raju ubuntu
  127  docker ps
  128  docker rename c8c549ac53cf dev
  129  docker ps



ASSIGNMENT -
docker help
Google.com
update	Update configuration of one or more containers
wait	Block until one or more containers stop, then print their exit codes

31  clear
  132  docker ps
  133  docker logs c8c549ac53cf
  134  docker logs c8c549ac53cf
  135  docker exec c8c549ac53cf more /var/jenkins_home/secrets/initialAdminPassword
  136  docker logs c8c549ac53cf
 154  docker logs c8c549ac53cf
  155  docker logs c8c549ac53cf
  156  c;ear
  157  clear
  158  docker stats
  159  docker stats 3bda46964f13
  160  CLEAR
  161  clear
  162  docker ps
  163  ps -eaf | grep docker
  164  docker top
  165  clear
  166  docker ps
  167  docker top 3bda46964f13
  168  clear
  169  docker events
  170  history

===============================
3.6.36.221
==========================================
-  Collection of layers.      - DONE
- Each layer is filesystem    - DONE
- Layer 0 rootfs                - DONE
- Each layer identified by UUID - given by SHA256   - DONE
- Other layers than Layer 0 incremental   - DONE
- Layer merging is done by UNION MOUNTS - DONE
- In case of conflict - Top layers wins - PENDIN
- When you create*** container - ONE EMPTY get created...DIFF LAYER - DONE
- Container get mounted to MERGED Layers(MNT) DONEs
                          ---- USER SPACE
                          --- NET
                          - PMAP
                        
 11  clear
   12  docker images
   13  docker info
   14  cd /var/lib/docker
   15  ls
   16  docker info
   17  clear
   18  ls
   19  cd overlay2/
   20  ls
   21  du -sh
   22  cd ..
   23  ls
   24  cd image/
   25  ls
   26  df -sh
   27  du -sh
   28  clear
   29  ls
   30  cd overlay2/
   31  ls
   32  cd ..
   33  sl
   34  clear
   35  ls
   36  ls
   37  cd ..
   38  ls
   39  cd overlay2/
   40  clear
   41  ls
   42  docker pull ubuntu
   43  ls
   44  docker inspect ubuntu
   45  clear
   46  ls
   47  tree
   48  yum install tree -y
   49  clear
   50  tree
   51  c lear
   52  clear
   53  du -sh --max-depth=1
   54  du -h --max-depth=1
   55  cd ./a5993e21bd82cf7aeb2b7810d915db0d1c21f08b6c30c112899d96d823cd7174
   56  ls
   57  cd work/
   58  ls
   59  cd ..
   60  clear
   61  ls
   62  cd diff/
   63  ls
   64  tree
   65  cd ..
   66  ls
   67  cd ..
   68  clear
   69  du -h --max-depth=1
   70  cd ./138c4bd2fee977e1f14f566c96b34417acc58a25bfe18918447afd1aabbd0d9e
   71  ls
   72  clear
   73  ls
   74  cd diff/
   75  ls
   76  clear
   77  ls
   78  cd ..
   79  ls
   80  cd ..
   81  ls
   82  cd ..
   83  ls
   84  cd image/
   85  clear
   86  tree
   87  du -sh
   88  clear
   89  cd ..
   90  ls
   91  cd containers/n
   92  cd containers/
   93  clear
   94  ls
   95  cd ..
   96  ls
   97  cd overlay2/
   98  clear
   99  ls
  100  docker create ubuntu
  101  ls
  102  du -sh bc241728ce3945344b7099f94fd0597961c406b0b642f0e95b20987fa7043164
  103  du -sh bc241728ce3945344b7099f94fd0597961c406b0b642f0e95b20987fa7043164-init
  104  clear
  105  ls
  106  docker ps -a
  107  cd  ../containers/
  108  ls
  109  du -sh 59ad9d9435515f9166445b36828ec3c6c6dd819ca17fded417d820df681a2e02
  110  cd ../image/
  111  clear
  112  ls
  113  du -sh overlay2
  114  cd ../overlay2/
  115  ls
  116  du -sh .
  117  docker ps
  118  docker ps -a
  119  docker start 59ad9d943551
  120  docker ps -a
  121  du -sh .
  122  docker ps -a
  123  docker rm 59ad9d943551
  124  clear
  125  ls
  126  ls ../containers/
  127  docker run -itd ubuntu
  128  du -sh
  129  ls
  130  du -sh ce3816c344faf1900fe2e2bbcaa23ef391ac155e910812241f4543a15665f58d
  131  du -sh ce3816c344faf1900fe2e2bbcaa23ef391ac155e910812241f4543a15665f58d-init
  132  clear
  133  ls
  134  docker ps
  135  cd ../containers/
  136  du -sh .
  137  clear
  138  ls
  139  ls
  140  cd ../overlay2/
  141  ls
  142  docker ps
  143  docker inspect 54bdeddf9839
  144  df -kh
  145  docker ps
  146  docker attach 54bdeddf9839
  147  ls
  148  cd ..
  149  ls
  150  pwd
  151  find . -name devopsschool.com
  152  docker ps -a
  153  docker stop 54bdeddf9839
  154  find . -name devopsschool.com
  155  ls
  156  cd overlay2/
  157  ls
  158  du -sh ce3816c344faf1900fe2e2bbcaa23ef391ac155e910812241f4543a15665f58d
  159  du -sh
  160  cd ce3816c344faf1900fe2e2bbcaa23ef391ac155e910812241f4543a15665f58d
  161  ls
  162  cd ..
  163  ls
  164  cd ../containers/
  165  ls
  166  docker ps
  167  docker ps -a
  168  docker rm 54bdeddf9839
  169  ls
  170  cd ../overlay2/
  171  ls
  172  ls
  173  docker images
  174  docker rmi ubuntu
  175  ls
  176  ls
  177  ls -a
  178  cd 1
  179  ls
  180  more l/
  181  cd l/
  182  ls
  183  cd ..
  184  ls
  185  clear
  186  docker run -itd ubuntu
  187  docker ps
  188  docker attach 51bd7a3c5112
  189  docker ps
  190  docker stop 51bd7a3c5112
  191  find . -name rajesh.txt
  192  docker ps -a
  193  docker start 51bd7a3c5112
  194  find . -name rajesh.txt
  195  history

===================================
How to create image?
Lazy way - Wasting time - Manual work - 
=====================
Using container

 195  history
  196  clear
  197  docker ps -a
  198  docker attach 51bd7a3c5112
  199  docker ps
  200  docker ps
  201  docker history ubuntu
  202  docker commit -a"RajeshKuamr" -m"ub-git" 51bd7a3c5112 ub-git
  203  docker images
  204  docker history ubuntu
  205  docker history ub-git
  206  docker run -it ub-git
  207  clear
  208  docker ps
  209  docker commit -a"RajeshKuamr" -m"ub-git" cb8f0be7c1f7 ub-git
  210  docker history ub-git
  211  docker run -it ub-git
  212  docker ps
  213  docker commit -a"RajeshKuamr" -m"ub-git" 612b9447947f ub-git
  214  docker images
  215  docker history ub-git
  216  docker run -it ub-git
  217  history


Intelligent way - Saving time - Full Auto
========================
dockerfile

FROM ubuntu
MAINTAINER rjjesh fsdsff fsd dfs f 
RUN apt-get update && apt-get install git -y


 219  cd
  220  ls
  221  mkdir doc
  222  cd doc/
  223  ls
  224  vi Dockerfile
  225  docker build -t rajesh .
  226  ls
  227  touch softeare.zip
  228  ls
  229  vi Dockerfile
  230  docker build -t rajesh .
  231  docker run -itd rajesh
  232  docker ps
  233  docker exec a8294b964e4a ls /opt
  234  history

1 15.206.160.168
2 13.233.142.232
3 13.235.31.203
4 13.235.241.182
5 13.126.123.236

6 13.232.118.250
7 13.232.208.98
8 15.206.92.249
9 13.233.183.19
10  13.235.113.124
11  13.233.215.170
12  13.232.10.41
13  13.234.20.129
14  13.235.42.193
15  13.235.254.212
==================================================
Jenkins
    openjdk:8-jdk
        buildpack-deps:stretch-scm
            buildpack-deps:stretch-curl
                debian:stretch
                      

Dockerfile rule - 
  - Each line in Dockerfile will create ONE Layer.
  - Next Layer would be created from a Container of Previous layer.

Task 1 -Study Jenkisn dockerfile

FROM ubuntu
MAINTAINER rjjesh fsdsff fsd dfs f 
RUN touch /opt/rajesh1.txt
RUN touch /opt/rajesh2.txt
RUN touch /opt/rajesh3.txt

How to share docker images?
1. Using Tar ball
9  docker save -o doc2.tar doc2
  270  ls
  271  docker ps -a
  272  docker images
  273  docker rmi doc2
  274  clear
  275  docker images
  276  ls
  277  docker load -i doc2.tar
  278  docker images
  279  history

2. Using hub.docker
    1- hub.docker.com
    2. docker login
    3. name a image as per repo theree
    4. push it

 270  ls
  271  docker ps -a
  272  docker images
  273  docker rmi doc2
  274  clear
  275  docker images
  276  ls
  277  docker load -i doc2.tar
  278  docker images
  279  history
  280  clar
  281  docker images
  282  docker tag doc2 scmgalaxy/sfotwarrr
  283  clear
  284  docker images
  285  docker login
  286  docker push scmgalaxy/sfotwarrr
  287  history

3. Using nexus


========================================
CMD vs ENTYPOINT
========================
How to run container??
        PID 1?
How to set PID 1?
---------------------
If pID 1 is running - Container is running.

Mode of Executation....
---
EXEC way
SHELL WAY

ls 
/bin/ls

echo
/bin/echo rrr eeeee
-----------------------------
CMD 
    CMD CAN BE REPLACED DURING RUN TIME.

ENTRYPOINT
    IT WLL NOT BE REPLACED.
    ARGUMENT PASSERD TO CONtiNAER DUring Run time would be PARAMETER TO A ENTRYPOINT



LAB - 
https://www.devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html














